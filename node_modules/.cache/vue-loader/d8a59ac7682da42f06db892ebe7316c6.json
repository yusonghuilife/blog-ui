{"remainingRequest":"/Users/yusonghu/Desktop/BLOGUI/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yusonghu/Desktop/BLOGUI/packages/component/color-picker/color-picker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yusonghu/Desktop/BLOGUI/packages/component/color-picker/color-picker.vue","mtime":1538273042000},{"path":"/Users/yusonghu/Desktop/BLOGUI/node_modules/cache-loader/dist/cjs.js","mtime":1583290073623},{"path":"/Users/yusonghu/Desktop/BLOGUI/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'colorPicker',\n  props: {\n    // 当前颜色值\n    value: {\n      type: String,\n      required: true\n    },\n    // 默认颜色\n    defaultColor: {\n      type: String,\n      default: '#000000'\n    },\n    // 禁用状态\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      // 面板打开状态\n      openStatus: false,\n      // 鼠标经过的颜色块\n      hoveColor: null,\n      // 主题颜色\n      tColor: ['#000000', '#ffffff', '#eeece1', '#1e497b', '#4e81bb', '#e2534d', '#9aba60', '#8165a0', '#47acc5', '#f9974c'],\n      // 颜色面板\n      colorConfig: [\n        ['#7f7f7f', '#f2f2f2'],\n        ['#0d0d0d', '#808080'],\n        ['#1c1a10', '#ddd8c3'],\n        ['#0e243d', '#c6d9f0'],\n        ['#233f5e', '#dae5f0'],\n        ['#632623', '#f2dbdb'],\n        ['#4d602c', '#eaf1de'],\n        ['#3f3150', '#e6e0ec'],\n        ['#1e5867', '#d9eef3'],\n        ['#99490f', '#fee9da']\n      ],\n      // 标准颜色\n      bColor: ['#c21401', '#ff1e02', '#ffc12a', '#ffff3a', '#90cf5b', '#00af57', '#00afee', '#0071be', '#00215f', '#72349d'],\n      html5Color: this.value\n    }\n  },\n  computed: {\n    // 显示面板颜色\n    showPanelColor () {\n      if (this.hoveColor) {\n        return this.hoveColor\n      } else {\n        return this.showColor\n      }\n    },\n    // 显示颜色\n    showColor () {\n      if (this.value) {\n        return this.value\n      } else {\n        return this.defaultColor\n      }\n    },\n    // 颜色面板\n    colorPanel () {\n      let colorArr = []\n      for (let color of this.colorConfig) {\n        colorArr.push(this.gradient(color[1], color[0], 5))\n      }\n      return colorArr\n    }\n  },\n  methods: {\n    triggerHtml5Color () {\n      this.$refs.html5Color.click()\n    },\n    // 更新组件的值 value\n    updataValue (value) {\n      this.$emit('input', value)\n      this.$emit('change', value)\n      this.openStatus = false\n    },\n    // 设置默认颜色\n    handleDefaultColor () {\n      this.updataValue(this.defaultColor)\n    },\n    // 格式化 hex 颜色值\n    parseColor (hexStr) {\n      if (hexStr.length === 4) {\n        hexStr = '#' + hexStr[1] + hexStr[1] + hexStr[2] + hexStr[2] + hexStr[3] + hexStr[3]\n      } else {\n        return hexStr\n      }\n    },\n    // RGB 颜色 转 HEX 颜色\n    rgbToHex (r, g, b) {\n      let hex = ((r << 16) | (g << 8) | b).toString(16)\n      return '#' + new Array(Math.abs(hex.length - 7)).join('0') + hex\n    },\n    // HEX 转 RGB 颜色\n    hexToRgb (hex) {\n      hex = this.parseColor(hex)\n      let rgb = []\n      for (let i = 1; i < 7; i += 2) {\n        rgb.push(parseInt('0x' + hex.slice(i, i + 2)))\n      }\n      return rgb\n    },\n    // 计算渐变过渡颜色\n    gradient (startColor, endColor, step) {\n      // 讲 hex 转换为 rgb\n      let sColor = this.hexToRgb(startColor)\n      let eColor = this.hexToRgb(endColor)\n\n      // 计算R\\G\\B每一步的差值\n      let rStep = (eColor[0] - sColor[0]) / step\n      let gStep = (eColor[1] - sColor[1]) / step\n      let bStep = (eColor[2] - sColor[2]) / step\n\n      let gradientColorArr = []\n      // 计算每一步的hex值\n      for (let i = 0; i < step; i++) {\n        gradientColorArr.push(this.rgbToHex(parseInt(rStep * i + sColor[0]), parseInt(gStep * i + sColor[1]), parseInt(bStep * i + sColor[2])))\n      }\n      return gradientColorArr\n    }\n  },\n  mounted () {\n    // 点击页面上其他地方，关闭弹窗\n    document.onclick = () => {\n      this.openStatus = false\n    }\n  }\n}\n",{"version":3,"sources":["color-picker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"color-picker.vue","sourceRoot":"packages/component/color-picker","sourcesContent":["<template lang=\"html\">\n  <div class=\"m-colorPicker\" ref=\"colorPicker\" v-on:click=\"event => { event.stopPropagation() }\">\n    <!-- 颜色显示小方块 -->\n    <div class=\"colorBtn\"\n      v-bind:style=\"`background-color: ${showColor}`\"\n      v-on:click=\"openStatus = !disabled\"\n      v-bind:class=\"{ disabled: disabled }\"\n    ></div>\n    <!-- 用以激活HTML5颜色面板 -->\n    <input type=\"color\"\n      ref=\"html5Color\"\n      v-model=\"html5Color\"\n      v-on:change=\"updataValue(html5Color)\">\n    <!-- 颜色色盘 -->\n    <div class=\"box\" v-bind:class=\"{ open: openStatus }\">\n      <div class=\"hd\">\n        <div class=\"colorView\" v-bind:style=\"`background-color: ${showPanelColor}`\"></div>\n        <div class=\"defaultColor\"\n          v-on:click=\"handleDefaultColor\"\n          v-on:mouseover=\"hoveColor = defaultColor\"\n          v-on:mouseout=\"hoveColor = null\"\n        >默认颜色</div>\n      </div>\n      <div class=\"bd\">\n        <h3>主题颜色</h3>\n        <ul class=\"tColor\">\n          <li\n            v-for=\"(color, index) of tColor\"\n            :key=\"index\"\n            v-bind:style=\"{ backgroundColor: color }\"\n            v-on:mouseover=\"hoveColor = color\"\n            v-on:mouseout=\"hoveColor = null\"\n            v-on:click=\"updataValue(color)\"\n          ></li>\n        </ul>\n        <ul class=\"bColor\">\n          <li v-for=\"(item, index) of colorPanel\" :key=\"index\">\n            <ul>\n              <li\n                v-for=\"(color, cindex) of item\"\n                :key=\"cindex\"\n                v-bind:style=\"{ backgroundColor: color }\"\n                v-on:mouseover=\"hoveColor = color\"\n                v-on:mouseout=\"hoveColor = null\"\n                v-on:click=\"updataValue(color)\"\n              ></li>\n            </ul>\n          </li>\n        </ul>\n        <h3>标准颜色</h3>\n        <ul class=\"tColor\">\n          <li\n            v-for=\"(color, index) of bColor\"\n            :key=\"index\"\n            v-bind:style=\"{ backgroundColor: color }\"\n            v-on:mouseover=\"hoveColor = color\"\n            v-on:mouseout=\"hoveColor = null\"\n            v-on:click=\"updataValue(color)\"\n          ></li>\n        </ul>\n        <h3 v-on:click=\"triggerHtml5Color\">更多颜色...</h3>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'colorPicker',\n  props: {\n    // 当前颜色值\n    value: {\n      type: String,\n      required: true\n    },\n    // 默认颜色\n    defaultColor: {\n      type: String,\n      default: '#000000'\n    },\n    // 禁用状态\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      // 面板打开状态\n      openStatus: false,\n      // 鼠标经过的颜色块\n      hoveColor: null,\n      // 主题颜色\n      tColor: ['#000000', '#ffffff', '#eeece1', '#1e497b', '#4e81bb', '#e2534d', '#9aba60', '#8165a0', '#47acc5', '#f9974c'],\n      // 颜色面板\n      colorConfig: [\n        ['#7f7f7f', '#f2f2f2'],\n        ['#0d0d0d', '#808080'],\n        ['#1c1a10', '#ddd8c3'],\n        ['#0e243d', '#c6d9f0'],\n        ['#233f5e', '#dae5f0'],\n        ['#632623', '#f2dbdb'],\n        ['#4d602c', '#eaf1de'],\n        ['#3f3150', '#e6e0ec'],\n        ['#1e5867', '#d9eef3'],\n        ['#99490f', '#fee9da']\n      ],\n      // 标准颜色\n      bColor: ['#c21401', '#ff1e02', '#ffc12a', '#ffff3a', '#90cf5b', '#00af57', '#00afee', '#0071be', '#00215f', '#72349d'],\n      html5Color: this.value\n    }\n  },\n  computed: {\n    // 显示面板颜色\n    showPanelColor () {\n      if (this.hoveColor) {\n        return this.hoveColor\n      } else {\n        return this.showColor\n      }\n    },\n    // 显示颜色\n    showColor () {\n      if (this.value) {\n        return this.value\n      } else {\n        return this.defaultColor\n      }\n    },\n    // 颜色面板\n    colorPanel () {\n      let colorArr = []\n      for (let color of this.colorConfig) {\n        colorArr.push(this.gradient(color[1], color[0], 5))\n      }\n      return colorArr\n    }\n  },\n  methods: {\n    triggerHtml5Color () {\n      this.$refs.html5Color.click()\n    },\n    // 更新组件的值 value\n    updataValue (value) {\n      this.$emit('input', value)\n      this.$emit('change', value)\n      this.openStatus = false\n    },\n    // 设置默认颜色\n    handleDefaultColor () {\n      this.updataValue(this.defaultColor)\n    },\n    // 格式化 hex 颜色值\n    parseColor (hexStr) {\n      if (hexStr.length === 4) {\n        hexStr = '#' + hexStr[1] + hexStr[1] + hexStr[2] + hexStr[2] + hexStr[3] + hexStr[3]\n      } else {\n        return hexStr\n      }\n    },\n    // RGB 颜色 转 HEX 颜色\n    rgbToHex (r, g, b) {\n      let hex = ((r << 16) | (g << 8) | b).toString(16)\n      return '#' + new Array(Math.abs(hex.length - 7)).join('0') + hex\n    },\n    // HEX 转 RGB 颜色\n    hexToRgb (hex) {\n      hex = this.parseColor(hex)\n      let rgb = []\n      for (let i = 1; i < 7; i += 2) {\n        rgb.push(parseInt('0x' + hex.slice(i, i + 2)))\n      }\n      return rgb\n    },\n    // 计算渐变过渡颜色\n    gradient (startColor, endColor, step) {\n      // 讲 hex 转换为 rgb\n      let sColor = this.hexToRgb(startColor)\n      let eColor = this.hexToRgb(endColor)\n\n      // 计算R\\G\\B每一步的差值\n      let rStep = (eColor[0] - sColor[0]) / step\n      let gStep = (eColor[1] - sColor[1]) / step\n      let bStep = (eColor[2] - sColor[2]) / step\n\n      let gradientColorArr = []\n      // 计算每一步的hex值\n      for (let i = 0; i < step; i++) {\n        gradientColorArr.push(this.rgbToHex(parseInt(rStep * i + sColor[0]), parseInt(gStep * i + sColor[1]), parseInt(bStep * i + sColor[2])))\n      }\n      return gradientColorArr\n    }\n  },\n  mounted () {\n    // 点击页面上其他地方，关闭弹窗\n    document.onclick = () => {\n      this.openStatus = false\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.m-colorPicker{\n  position: relative; text-align: left; font-size: 14px; display: inline-block;\n  ul,li,ol{ list-style: none; margin: 0; padding: 0; }\n  input{ display: none; }\n  .colorBtn{ width: 15px; height: 15px; }\n  .colorBtn.disabled{ cursor: no-drop; }\n  .box{\n    position: absolute; width: 190px; background: #fff; border: 1px solid #ddd; visibility: hidden; border-radius: 2px; margin-top: 2px; padding: 10px; padding-bottom: 5px; box-shadow: 0 0 5px rgba(0,0,0,.15); opacity: 0; transition: all .3s ease;\n    h3{ margin: 0; font-size: 14px; font-weight: normal; margin-top: 10px; margin-bottom: 5px; line-height: 1; color: #333; }\n  }\n  .box.open{ visibility: visible; opacity: 1; }\n  .hd{\n    overflow: hidden; line-height: 29px;\n    .colorView{ width: 100px; height: 30px; float: left; transition: background-color .3s ease; }\n    .defaultColor{ width: 80px; float: right; text-align: center; border: 1px solid #ddd; cursor: pointer; color: #333; }\n  }\n  .tColor{\n    li{ width: 15px; height: 15px; display: inline-block; margin: 0 2px; transition: all .3s ease; }\n    li:hover{ box-shadow: 0 0 5px rgba(0,0,0,.4); transform: scale(1.3); }\n  }\n  .bColor{\n    li{\n      width: 15px; display: inline-block; margin: 0 2px;\n      li{ display: block; width: 15px; height: 15px; transition: all .3s ease; margin: 0; }\n      li:hover{ box-shadow: 0 0 5px rgba(0,0,0,.4); transform: scale(1.3); }\n    }\n  }\n}\n</style>\n  "]}]}